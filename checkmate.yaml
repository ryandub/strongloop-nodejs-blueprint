blueprint:
  id: 1cd3b25ea36547b79969b8d20a870349 
  name: StrongLoop Suite 
  version: 1.1.0
  services:
    strongloop:
      component:
        name: strongloop
        type: application
      constraints:
      - count: 1
      display-name: StrongLoop Suite
  options:
    # Deployment Options
    region:
      label: Region
      type: string
      required: true
      default: ORD
      display-hints:
        group: deployment
        list-type: region
        choice:
        - DFW
        - ORD
        - LON
        - SYD
        - IAD
      constrains:
      - setting: region
        provider: load-balancer
    # Application Options
    url:
      label: Site Address
      description: 'Domain name to access deployment'
      type: url
      required: true
      default: http://example.com/
      display-hints:
        group: application
        order: 1
        default-protocol: http
        sample: http://example.com/
      constraints:
      - protocols: [http]
        message: protocols are limited to http only
      - regex: '^([a-zA-Z]{2,}?\:\/\/[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*\.[a-zA-Z]{2,6}(?:\/?|(?:\/[\w\-]+)*)(?:\/?|\/\w+\.[a-zA-Z]{2,4}(?:\?[\w]+\=[\w\-]+)?)?(?:\&[\w]+\=[\w\-]+)*)$'
        message: must be a valid web address
      constrains:
      - setting: domain
        service: strongloop
        attribute: hostname
    username:
      label: System Username
      type: string
      description: The user name used to access the server 
      required: true
      default: strongloop
      display-hints:
        group: application
        order: 2
      constrains:
      - setting: resources/strongloop_user/name
      constraints:
      - regex: '^(?!^root$)([a-z_][a-z0-9_]{0,30})$'
        message: must be lower case, alpha numeric, fewer than 32 characters, and not 'root'
    password:
      label: System Password
      type: password
      description: Password to use for system user 
      default: '=generate_password(min_length=12, required_chars=["0123456789", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"])'
      help: |
        Optional: Password provided must be between 8 and 32 characters in length.
      display-hints:
        group: application
        order: 3
      constraints:
      - regex: '^(?=.*).{8,32}$'
        message: must be between 8 and 32 characters long
      # disabling until generate-password can handle it!
      #- regex: '^(?=.*\d)'
      #  message: must contain a digit
      #- regex: '^(?=.*[a-z])'
      #  message: must contain a lower case letter
      #- regex: '^(?=.*[A-Z])'
      #  message: must contain an upper case letter
      constrains:
      - setting: resources/strongloop_user/password
    # Server Options
    os:
      label: Operating System
      type: string
      description: The operating system for the server.
      default: Ubuntu 12.04
      display-hints:
        group: server
        order: 2
        list-type: compute.os
        choice:
        - name: "Ubuntu 12.04 LTS (Precise Pangolin)"
          value: Ubuntu 12.04
      constraints:
      - in: ["Ubuntu 12.04"]
        message: unsupported operating system
      constrains:
      - setting: os
        resource_type: compute
        service: strongloop
    server_size:
      label: Server Size
      type: integer
      default: 1024
      description: The size of the server instance in MB of RAM.
      help: |
        Required: Select the desired Performance Cloud Server flavor.  The two
        disk values represent the system and data disk sizes respectively.
      display-hints:
        group: server
        order: 3
        list-type: compute.memory
        choice:
        - name: 1 GB (20 GB / - disk)
          value: 1024
        - name: 2 GB (40 GB / 20 GB disk)
          value: 2048
        - name: 4 GB (40 GB / 40 GB disk)
          value: 4096
        - name: 8 GB (40 GB / 80 GB disk)
          value: 8192
        - name: 15 GB (40 GB / 150 GB disk)
          value: 15000
        - name: 30 GB (40 GB / 300 GB disk)
          value: 30720
      constrains:
      - setting: memory
        service: strongloop
        resource_type: compute
      constraints:
      - greater-than-or-equal-to: 1024
        message: must be 1024 or larger
      - less-than-or-equal-to: 30720
        message: must be 30720 or smaller
  resources:
    "strongloop_user":
      type: user
      constrains:
      - setting: username
        service: strongloop
        resource_type: application
        attribute: name
      - setting: password
        service: strongloop
        resource_type: application
        attribute: password
  meta-data:
    schema-version: v0.7
    blueprint-type: Application
    application-name: StrongLoop Suite
    application-version: "1.0"
    flavor: Single Linux server with StrongLoop Suite 
    flavor-weight: 1
    reach-info:
      option-groups:
      - application: StrongLoop Options
      - server: Server Options
      tattoo: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/strongloop-tattoo.png 
      icon-20x20: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/strongloop-icon-20x20.png 
      rackspace-supported: false
  documentation:
    abstract: |
      [StrongLoop](http://strongloop.com) Suite is a modern app platform with Node.js, NPM and tooling for use in production.
      Backed by professional support plans from StrongLoop.
    guide: |
      This blueprint includes a single server running StrongLoop Suite.

      This blueprint's performance has not been measured.
    instructions: |
      #### GETTING STARTED
      This deployment provides a single Linux server with Node.js and the StrongLoop
      command-line tool installed.

      Once the deployment is complete, the LoopBack sample application is available
      in the sls-sample-app sub-directory of your home directory. To access the
      sample application, navigate to the IP address of the server on port 3000
      (for example, https://1.2.3.4:3000). For more information, see the [LoopBack
      documentation](http://docs.strongloop.com/display/DOC/LoopBack).

      To create your own application, SSH to the server using the user and password
      provided and follow the guides below. See
      [docs.strongloop.com](http://docs.strongloop.com/) for more information about
      StrongLoop Suite.  Additionally, the private key provided in the passwords
      section can be used to login as root via SSH.  For information on how to use
      SSH keys, please see these tutorials for [Mac OS X and Linux](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-linuxmac)
      and [Windows using PuTTY](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-windows).

      #####STRONGLOOP

      [StrongLoop](http://strongloop.com/) provides an API tier for connecting enterprise data to devices and
      browsers. StrongLoop Suite comes with a private mBaaS, an operations and
      performance monitoring console, a command-line tool and technical support from
      Node experts.

      LoopBack is an open-source mobile backend framework built on Node.js that
      enables you to connect mobile applications to your data. You can run LoopBack
      on-premises or in the cloud. StrongLoop offers support, training and
      professional services for LoopBack. StrongOps provides real-time performance
      monitoring and operational support for Node.js applications with CPU
      profiling, event loop inspection, and more.

      #####Getting started with the LoopBack sample app
      For more information see [Getting Started](http://docs.strongloop.com/display/DOC/Getting+started#Gettingstarted-CreateyourfirstLoopBackapplication)


      ```
      $slc lb example
      $slc cd sls-sample-app
      $slc run .
      ```

      ######Getting started with LoopBack from scratch
      For more information see [Creating a LoopBack Application](http://docs.strongloop.com/display/DOC/Creating+a+LoopBack+application)


      ```
      $mkdir myLoopBackProject
      $cd myLoopBackProject
      $slc project myLoopBackApp
      $slc lb model products
      $slc lb model customers
      $slc lb model stores
      $slc lb model cars
      ```
  display-outputs:
    "Site Address":
      type: url
      source: options://url
      extra-sources:
        ipv4: "services://strongloop/ip"
      order: 1
      group: application
    "Server Private SSH Key":
      type: private-key
      source: "resources://deployment-keys/instance/private_key"
      order: 2
      group: application
      is-secret: true
    "System User":
      source: "resources://strongloop_user/instance/username"
      group: application
      order: 2
      type: string
    "System Password":
      source: "resources://strongloop_user/instance/password"
      type: password
      group: application
      order: 3
      is-secret: true
environment:
  description: This environment uses next-gen cloud servers.
  name: Next-Gen Open Cloud
  providers:
    chef-solo:
      provides:
      - application: http
      vendor: opscode
      constraints:
      - source: %repo_url%
    nova: {}
    database: {}
    common:
      vendor: rackspace
inputs:
  blueprint:
    url: http://strongloop.example.com/
    region: ORD
    username: strongloop
    server_size: 1024
    password: Ul345678

